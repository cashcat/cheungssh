function getKey(key) {
    // 获取URL中?之后的字符  
    var str = location.search;
    str = str.substring(1,str.length);

    // 以&分隔字符串，获得类似name=123这样的元素数组  
    var arr = str.split("&");
    var obj = new Object();

    // 将每一个数组元素以=分隔并赋给obj对象      
    for(var i = 0; i < arr.length; i++) {
        var tmp_arr = arr[i].split("=");
        obj[decodeURIComponent(tmp_arr[0])] = decodeURIComponent(tmp_arr[1]);
    }
    return obj[key];
}


//命令搜索

$(function () {
    var cache = {};  //缓存功能
    $("#inputCommand").autocomplete({
        minLength: 1, //最少多少开始搜索
        source: function (request, response) {
            var path = request.term;  //自身携带的是term key
            var requestData = {"path": path};
            if (path in cache) {
                response(cache[path]);
                return;
            }

            $.getJSON(headURL + pathSearchURL, requestData, function (data, status, xhr) { //requestData是组成的数据
                var content = data.content;
                cache[path] = content;
                response(content);
            });
        }
    });
});



//创建CRT窗口
function createCRTWindow() {
    var showCRTWindow = document.getElementById("showCRTWindow");
    showCRTWindow.innerHTML = ""//清空CRT窗口，避免重复显示
    var CRTWindowExample = document.getElementById("CRTWindowExample");
    var serverList=getKey("serverList")
    serverList = JSON.parse(serverList)
    for (var i = 0; i < serverList.length; i++) {
	//取得ID
	var sid = serverList[i]["sid"];
	var username = serverList[i]["username"];
	var alias = serverList[i]["alias"];
        //创建CRT
        var t = CRTWindowExample.cloneNode(true);
        t.setAttribute("id", sid);//ajax访问后端的时候，需要使用这个sid
        $(t).addClass("CRT");//增加类，有js通过这个CRT类控制修改窗口大小
        $(t).find(".title")[0].textContent = username + "@" + alias;//表头修改为别名
        //t.removeAttribute("id");//删除样本HTML的id
        t.style.display = "block";
        showCRTWindow.appendChild(t);


    }
}



function createMyCommandHistory(command) {
    var showCommandHistory = document.getElementById("showCommandHistory");
    //增加命令记录
    var label = document.createElement("label");
    label.className = "pull-left  label label-success";           //可以根据命令返回的状态生成绿色或者红色
    label.textContent = command;
    label.style.cssText = "position: relative;cursor:pointer;border-radius:5px;margin-left:5px;";
    label.onclick = function () {
        var inputCommand = document.getElementById("inputCommand");
        inputCommand.value = this.textContent;
        document.getElementById("inputCommand").focus();//输入框获取光标

    }

    showCommandHistory.appendChild(label);
}


function loadMyCommandHistory() {
    jQuery.ajax({
        "url": myCommandHistoryURL,
        "dataType": "jsonp",
        "beforeSend": start_load_pic,
        "complete": stop_load_pic,
        "error": errorAjax,
        "success": function (data) {
            responseCheck(data);
            if (data.status) {
                var content = data.content;
                for (var i = 0; i < content.length; i++) {
                    createMyCommandHistory(content[i]);
                }

            }
        }
    });
}


function processProgress(sid, content) {
    //显示命令结果
    try {
        if (content.content === "") {
            return false;
        }
        var crt = document.getElementById(sid);
        var pre = $(crt).find("pre")[0];
	var length=window.currentCommand.split(" ")[0].split("/").length-1
        //pre.innerHTML = pre.textContent + content.content;
        if (window.currentCommand.split(" ")[0].split("/")[length] === "top") {
		//接收到的新消息
		var recvContent = (window.topContentMemory[sid] + content.content).split(/top \- /)
		//console.log(recvContent)
		var recvContentLength = recvContent.length;
		if (recvContent.slice(1,recvContentLength).length === 0){
			return false;
		}
		//用内存记录下所有收到的数据，一次显示一页
		window.topContentMemory[sid] = recvContent.slice(1,recvContentLength).join("\r\n")
		if(recvContentLength > 0){
			//pre不支持\r\n
			var terminalContentLines=pre.innerHTML.split("\n");
			//Web页面已经显示的消息,切割成每一行
			var recvContentLines=recvContent[0].split("\r\n")
			for (var i=0;i<recvContentLines.length;i++){
				//var recvLine = recvContentLines[i].replace(/\\[6;1H/,"").replace(/(\){1,}/,"")
				var recvLine = recvContentLines[i]
				if (i=== 0){
					terminalContentLines[i] = "top - " + recvLine
					continue
				}
				if (i + 1 <= terminalContentLines.length){
					// 替换
					if (recvContentLines[i].match(/^ *$/)){
						//如果是空行则跳过
						continue
					}
					else{
						//真正的替换
						if(terminalContentLines[i].match(/PID/)){
							if (recvLine.match(/PID/)){
							}
							else{
								alert("意外出现")
							}
						}
						terminalContentLines[i] = recvLine
						
					}
				}
				else{
					//新增
					terminalContentLines.push(recvLine)
				}
			}
			//拼接字符串
			pre.innerHTML = terminalContentLines.join("\r\n")
		}
        }
	else{
		pre.innerHTML = pre.innerHTML + content.content;
	}
        if (content.status == false) {
            pre.style.color = "red";
        }
        if (window.currentCommand.split(" ")[0].split("/")[length] === "top") {
		pre.scrollTop = pre.scrollTop;//把滚动条设置到最顶部部，这样有更新的效果，跟CRT一样
	}
	else{
		pre.scrollTop = pre.scrollHeight;//把滚动条设置到最底部，这样有更新的效果，跟CRT一样
	}
    }
    catch (e) {
        console.log(e, "发生错误");
    }

}


//用来给setTimeout传递参数的，默认的setTimeout是不可以携带参数的
function _getCommandResult(tid, sid) {
    return function () {
        //访问真正的目标函数
        getCommandResult(tid, sid);
    }
}


function getCommandResult(tid, sid) {
    var data = {"tid": tid, "sid": sid};
    jQuery.ajax({
        "url": getCommandResultURL,
        "dataType": "jsonp",
        "data": data,
        "error": errorAjax,
        "success": function (data) {
            responseCheck(data);
            if (data.status) {
                var progress = document.getElementById("commandProgress").style.width = data.progress + "%";    //显示进度
                var showProgress = document.getElementById("showCommandProgress").textContent = data.progress + "%";
                //if (data.content.stage === "running") {  //stage是running或者done
                if (data.progress <100) {  //stage是running或者done
                    //当前函数的阶段没有完成，继续获取
                    setTimeout(_getCommandResult(tid, sid), 500);
                }

                if (data.progress == 100) {
                    $("#showExecuteRefresh").text("执行").removeClass("fa-refresh fa fa-spin");
                    //$("#commandProgress").removeClass("active");  //进度条不要动画
                    document.getElementById("commandProgress").style.width = "0%";
                    document.getElementById("showCommandProgress").textContent = "0%";
                    document.getElementById("inputCommand").removeAttribute("disabled");
                    $("#execute").find("button")[0].removeAttribute("disabled");
                    document.getElementById("inputCommand").focus();
                    showSuccessNotice();
                }
                processProgress(sid, data.content);//显示消息
            }
		else{
			showErrorInfo(data.content)
			return false;
		}

        }
    });


}

function executeCommand(command, force) {
	var serverList=getKey("serverList");
	serverList=JSON.parse(serverList)
	var servers=[];
	for (var i=0;i<serverList.length;i++){
		servers.push(serverList[i]["sid"])
	}
	var data = {"cmd": command, "servers": servers};
	//force是否强制执行
	data["force"] = force;
	data["task_type"] = "cmd";
	data["multi_thread"] = true;

    //document.getElementById("inputCommand").setAttribute("disabled", "disabled");   //命令未完成，禁用输入框
    //$("#execute").find("button")[0].setAttribute("disabled", "disabled");   //命令未完成，禁用输入框
    //清除进度条
    /*try {
        document.getElementById("commandProgress").style.width = "0.1";
        document.getElementById("showCommandProgress").textContent = "0%";
        $("#commandProgress").addClass("active");
    }
    catch (e) {

    }*/
    //记录当前运行的命令
    window.currentCommand = command;
    data = JSON.stringify(data);
    window.ajax = jQuery.ajax({
        "url": executeCommandURL,
        "dataType": "jsonp",
        "data": {"parameters": data},
	"error":errorAjax,
        "success": function (data) {
            responseCheck(data);
            if (!data.status) {
                document.getElementById("inputCommand").removeAttribute("disabled");
                //$("#execute").find("button")[0].removeAttribute("disabled");
                //$("#showExecuteRefresh").text("执行").removeClass("fa-refresh fa fa-spin");//动画
                showErrorInfo(data.content);
                return false;
            }
            //如果是命令拒绝
            if (data.ask) {
                //有交互提示
                startShadow();
                $("#confirmCommandDiv").show("fast");
                document.getElementById("showCommandWarn").innerHTML = data.content;
                return false;

            }
            if (data.status) {
                //增加之前先删除头一个，只记录5个
                if ($("#showCommandHistory").children().length >= 5) {
                    $("#showCommandHistory").children().eq(0).remove();
                }
                createMyCommandHistory(command);//增加显示命令历史

                var tid = data.content;
                for (var i = 0; i < servers.length; i++) {
                    getCommandResult(tid, servers[i]);
                }


            }


        }
    });

}


function startCommand() {
    //执行命令
    //给执行按钮换图标
    commandInput = document.getElementById("inputCommand");
    //enableCrond(commandInput);
    command = commandInput.value;
    command = command.replace("\n", "");
    command = command.replace(/^ */, "");
    window.currentCommand = command;//用于记录当前执行的命令，主要使用在强制交互的地方
    commandInput.value = "";
    commandInput.focus();
    if (command == "clear") {
        document.getElementById("showCommandResult").innerHTML = "";
        return true;
    }
    else if (/^ *$/.test(command)) {
        return false
    }
    else if (/^ *(vi|vim|\/usr\/bin\/vim|\/bin\/vim|\/bin\/vi)/.test(command)){
        showErrorInfo(window.vimInfo);
	return false;
    }
    else if (/^ *(vi|vim|cd|\/usr\/bin\/vim|\/bin\/vim)/.test(command)){
        showErrorInfo(window.refuseInfo);
        return false;
    }

 	//$("#showExecuteRefresh").text("").addClass("fa-refresh fa fa-spin");//动画
	var length=command.split(" ")[0].split("/").length-1
        if (command.split(" ")[0].split("/")[length] === "top") {
		$("#showCRTWindow").find("pre").html("")
		serverList=JSON.parse(getKey("serverList"))
		//存储已接收到的所有消息
		window.topContentMemory=[]
		for (var i=0;i<serverList.length;i++){
			//给每一个服务器开辟出一个空的空间存储所有top内容
			window.topContentMemory[serverList[i]["sid"]] = ""
		}
	}
	executeCommand(command, false);


}
function _checkRequestConnect(rid) {
    return function () {
        //访问真正的目标函数
       checkRequestConnect(rid)
	}
}

function checkRequestConnect(rid){
	jQuery.ajax({
		"url":checkRequestConnectURL,
		"beforeSend":start_load_pic,
		"complete":stop_load_pic,
		"error":errorAjax,
		"data":{"rid":rid},
		"dataType":"jsonp",
		"success":function(data){
			responseCheck(data)
			if(!data.status){
				showErrorInfo(data.content);
				return false;
			}
			else{
				var content=data.content;
				if (window.currentSelectedServers.length!==content.length){
					setTimeout(_checkRequestConnect(rid), 1000);
				}
				else{
					//所有链接已经完成
					document.getElementById("inputCommand").removeAttribute("disabled")
					
				}
			}
		}
	})
}

$(function () {
	document.getElementById("inputCommand").focus();
	createCRTWindow();
    //给点击计划任务绑定点击事件

    /*document.getElementById("addCrond").onclick = function () {
        loadCrond(this);
    }*/
    //计划任务按钮默认是禁用的

    //绑定命令清除按钮的点击事件


    //点击执行按钮
    document.getElementById("execute").onclick = function () {
        startCommand();

    }
    //命令输入框绑定事件
    //处理输入框
    document.getElementById("inputCommand").onkeyup = function () {
        if (event.keyCode === 13) {
            startCommand(this);
        }
    }


    //加载命令历史
    //loadMyCommandHistory();

    //绑定命令确认框的关闭按钮
    document.getElementById("closeConfirmCommandButton").onclick = function () {
        stopShadow();
        $("#confirmCommandDiv").hide("fast");
        document.getElementById("shadow").style.display = "none";
        document.getElementById("inputCommand").removeAttribute("disabled");
        $("#execute").find("button")[0].removeAttribute("disabled");
        $("#showExecuteRefresh").text("执行").removeClass("fa-refresh fa fa-spin");//动画
    }
    //绑定强制执行命令按钮
    document.getElementById("forceExecuteCommand").onclick = function () {
        stopShadow();
        command = document.getElementById("inputCommand").value;

        executeCommand(window.currentCommand, true);
        $("#confirmCommandDiv").hide("fast");

    }

    //处理CRT窗口的尺寸
    if (window.innerWidth < 737) {

        var CRT = document.getElementsByClassName("CRT");
        for (var i = 0; i < CRT.length; i++) {
            CRT[i].style.width = "98%";
        }

    }

    //绑定CRT全屏点击事件
    jQuery1_8("#fullScrenCRT").toggle(
        function () {
            //全屏
            $(".CRT").css({
                "width": "98%",
            })


        }, function () {
            //还原尺寸

            if (window.innerWidth > 737) {
                //半个屏幕
                $(".CRT").css({
                    "width": "48%",
                })
            }
            else {
                //手机是全屏
                $(".CRT").css({
                    "width": "98%",
                })
            }

        }
    );

    //输入框焦点


})
